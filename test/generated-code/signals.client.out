import 'package:dbus/dbus.dart';

/// Signal data for com.example.Test.Event1.
class ComExampleTestEvent1 extends DBusSignal {
  String get value => (values[0] as DBusString).value;

  ComExampleTestEvent1(DBusSignal signal) : super(signal.sender, signal.path, signal.interface, signal.name, signal.values);
}

/// Signal data for com.example.Test.Event2.
class ComExampleTestEvent2 extends DBusSignal {
  int get value => (values[0] as DBusInt32).value;

  ComExampleTestEvent2(DBusSignal signal) : super(signal.sender, signal.path, signal.interface, signal.name, signal.values);
}

class ComExampleTest extends DBusRemoteObject {
  /// Stream of com.example.Test.Event1 signals.
  late final Stream<ComExampleTestEvent1> event1;

  /// Stream of com.example.Test.Event2 signals.
  late final Stream<ComExampleTestEvent2> event2;

  ComExampleTest(DBusClient client, String destination, DBusObjectPath path) : super(client, destination, path) {
    event1 = DBusRemoteObjectSignalStream(this, 'com.example.Test', 'Event1').map((signal) {
      if (signal.signature == DBusSignature('s')) {
        return ComExampleTestEvent1(signal);
      } else {
        throw 'com.example.Test.Event1 contains invalid values ${signal.values}';
      }
    });

    event2 = DBusRemoteObjectSignalStream(this, 'com.example.Test', 'Event2').map((signal) {
      if (signal.signature == DBusSignature('i')) {
        return ComExampleTestEvent2(signal);
      } else {
        throw 'com.example.Test.Event2 contains invalid values ${signal.values}';
      }
    });
  }
}
